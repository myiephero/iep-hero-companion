apply plugin: 'com.android.application'

// Load keystore properties
def keystorePropertiesFile = rootProject.file("keystore/keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.myiephero.app"
    compileSdk rootProject.ext.compileSdkVersion
    
    defaultConfig {
        applicationId "com.myiephero.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        
        // Version management for Play Console
        versionCode 1000100  // Format: MAJOR(2)MINOR(2)PATCH(2) - 1.0.1
        versionName "1.0.1"
        
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Optimize for different device configurations
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        
        aaptOptions {
            // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
            // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
            noCompress 'js', 'css', 'html', 'json'
        }
    }
    
    // Signing configurations for Play Console
    signingConfigs {
        debug {
            // Debug keystore automatically generated
        }
        release {
            // Production keystore configuration from keystore.properties
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties['MYAPP_RELEASE_STORE_FILE'])
                storePassword keystoreProperties['MYAPP_RELEASE_STORE_PASSWORD']
                keyAlias keystoreProperties['MYAPP_RELEASE_KEY_ALIAS']
                keyPassword keystoreProperties['MYAPP_RELEASE_KEY_PASSWORD']
            } else {
                // Fallback to debug keystore if production keystore not configured
                logger.warn("Production keystore not found. Using debug keystore for release builds.")
                logger.warn("Create android/keystore/keystore.properties for production builds.")
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }
    
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            
            // Enable detailed logging for debug builds
            buildConfigField "boolean", "DEBUG_MODE", "true"
        }
        
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            
            // Use the optimized R8 instead of ProGuard
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            buildConfigField "boolean", "DEBUG_MODE", "false"
            
            // Optimize APK/AAB for Play Store
            zipAlignEnabled true
            
            // Enable crash reporting optimizations
            ndk {
                debugSymbolLevel 'SYMBOL_TABLE'
            }
        }
    }
    
    // Configure bundle for Android App Bundle (AAB)
    bundle {
        language {
            enableSplit = false  // Keep all languages in base APK for now
        }
        density {
            enableSplit = true   // Split by screen density
        }
        abi {
            enableSplit = true   // Split by CPU architecture
        }
    }
    
    // Compile options for modern Android development
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
        
        // Support for Java 8+ language features
        coreLibraryDesugaringEnabled true
    }
    
    // Packaging options to avoid conflicts
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
    
    // Lint options for CI/CD compatibility
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'InvalidPackage'
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    
    // Core Android dependencies
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    
    // Capacitor dependencies
    implementation project(':capacitor-android')
    implementation project(':capacitor-cordova-android-plugins')
    
    // Java 8+ support for older Android versions
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
    
    // Testing dependencies
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    
    // Additional dependencies for production builds
    implementation 'androidx.multidex:multidex:2.0.1'
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
