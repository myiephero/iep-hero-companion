Got it âœ… â€” Iâ€™ll make you a ready-to-apply Git patch file. Youâ€™ll be able to save it as fix-safari-redirect.patch and run:

git apply fix-safari-redirect.patch

This will:
	1.	Update capacitor.config.ts with allowNavigation.
	2.	Add SceneDelegate.swift with the WebView interception logic.
	3.	Update Info.plist to wire in SceneDelegate.

â¸»

ðŸ“¦ fix-safari-redirect.patch

diff --git a/capacitor.config.ts b/capacitor.config.ts
index 1234567..89abcde 100644
--- a/capacitor.config.ts
+++ b/capacitor.config.ts
@@
 const config: CapacitorConfig = {
   appId: 'com.myapp.mobile',
   appName: 'MyApp',
   webDir: 'dist',
-  server: {}
+  server: {
+    allowNavigation: [
+      '*.janeway.replit.dev',
+      'afd4ab41-fa60-4e78-9742-69bb4e3004d6-00-6i79wn87wfhu.janeway.replit.dev',
+    ],
+  },
 };
 
 export default config;
diff --git a/ios/App/App/SceneDelegate.swift b/ios/App/App/SceneDelegate.swift
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/ios/App/App/SceneDelegate.swift
@@
+import UIKit
+import Capacitor
+import WebKit
+
+class SceneDelegate: UIResponder, UIWindowSceneDelegate {
+    var window: UIWindow?
+
+    func scene(_ scene: UIScene,
+               willConnectTo session: UISceneSession,
+               options connectionOptions: UIScene.ConnectionOptions) {
+
+        guard let windowScene = (scene as? UIWindowScene) else { return }
+        let window = UIWindow(windowScene: windowScene)
+        self.window = window
+        window.makeKeyAndVisible()
+
+        if let vc = window.rootViewController as? CAPBridgeViewController {
+            if let webView = vc.bridge?.webView {
+                webView.navigationDelegate = self
+                webView.uiDelegate = self
+                print("[SUCCESS] WebView delegates attached âœ…")
+            }
+        }
+    }
+}
+
+extension SceneDelegate: WKNavigationDelegate, WKUIDelegate {
+    func webView(_ webView: WKWebView,
+                 decidePolicyFor navigationAction: WKNavigationAction,
+                 decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
+
+        guard let url = navigationAction.request.url else {
+            decisionHandler(.cancel)
+            return
+        }
+
+        print("[WKWebView] Navigation attempt â†’", url.absoluteString)
+
+        if url.host?.contains("replit.dev") == true ||
+           url.host?.contains("yourdomain.com") == true {
+            decisionHandler(.allow) // Stay inside WebView
+        } else {
+            decisionHandler(.cancel)
+            print("[BLOCKED] Safari redirect prevented â†’", url.absoluteString)
+        }
+    }
+
+    func webView(_ webView: WKWebView,
+                 createWebViewWith configuration: WKWebViewConfiguration,
+                 for navigationAction: WKNavigationAction,
+                 windowFeatures: WKWindowFeatures) -> WKWebView? {
+        print("[WKUIDelegate] Blocked popup")
+        return nil
+    }
+}
diff --git a/ios/App/App/Info.plist b/ios/App/App/Info.plist
index abcdef0..1234567 100644
--- a/ios/App/App/Info.plist
+++ b/ios/App/App/Info.plist
@@
   <key>UILaunchStoryboardName</key>
   <string>LaunchScreen</string>
   <key>UIMainStoryboardFile</key>
   <string>Main</string>
+  <key>UIApplicationSceneManifest</key>
+  <dict>
+    <key>UIApplicationSupportsMultipleScenes</key>
+    <false/>
+    <key>UISceneConfigurations</key>
+    <dict>
+      <key>UIWindowSceneSessionRoleApplication</key>
+      <array>
+        <dict>
+          <key>UISceneConfigurationName</key>
+          <string>Default Configuration</string>
+          <key>UISceneDelegateClassName</key>
+          <string>$(PRODUCT_MODULE_NAME).SceneDelegate</string>
+        </dict>
+      </array>
+    </dict>
+  </dict>
 </dict>
 </plist>


â¸»

ðŸ§ª Test Plan
	1.	Apply the patch:

git apply fix-safari-redirect.patch


	2.	Sync & rebuild:

npx cap sync ios
npx cap open ios


	3.	Run in simulator. In Xcode logs, confirm:

[SUCCESS] WebView delegates attached âœ…
[WKWebView] Navigation attempt â†’ https://afd4ab41-fa60...


	4.	Log in:
	â€¢	Redirect stays inside app (no Safari).
	â€¢	Logs confirm navigation allowed.
	5.	Test an external link (e.g. google.com):

[BLOCKED] Safari redirect prevented â†’ https://google.com



â¸»

âœ… After this, your app should never bounce out to Safari for replit.dev login.

â¸»

Do you want me to also make a GitHub issue version (with summary, steps to reproduce, fix strategy, and patch link) so your team can track it in your backlog?