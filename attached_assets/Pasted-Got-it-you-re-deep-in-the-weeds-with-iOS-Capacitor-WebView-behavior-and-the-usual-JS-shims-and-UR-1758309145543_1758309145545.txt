Got it — you’re deep in the weeds with iOS Capacitor WebView behavior, and the usual JS shims and URL fixes aren’t stopping Safari handoff. Let’s approach this systematically. I’ll give you a step-by-step plan, focusing on what actually matters for iOS WebView behavior, not the symptom-patching you’ve already tried.

⸻

Step 1: Confirm Capacitor WebView Configuration
	1.	Check capacitor.config.ts or .json:
Make sure allowNavigation includes your Replit domain:

ios: {
  contentInset: "always",
  allowNavigation: ["*.replit.dev"],
}


	2.	Enable WKWebView with proper settings:
In App/App/App/AppDelegate.swift (or via Capacitor hooks):

import Capacitor

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?

    func application(_ application: UIApplication,
                     didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        let capacitorBridge = CAPBridgeViewController()
        capacitorBridge.bridge?.webView?.configuration.preferences.javaScriptCanOpenWindowsAutomatically = true
        capacitorBridge.bridge?.webView?.navigationDelegate = self
        return true
    }
}

⚠️ Critical: javaScriptCanOpenWindowsAutomatically = true allows internal window.open calls to remain in WebView instead of opening Safari.

⸻

Step 2: Inspect Backend Redirects

Even if you’ve overridden window.open, iOS will hand off certain HTTP redirects to Safari automatically if WKWebView sees a 302 to a different scheme or domain.
	1.	Enable logging on the server:
	•	Capture every redirect with headers:

GET /auth
-> 302 Location: https://afd4ab41-fa60-4e78-9742-69bb4e3004d6-00-6i79wn87wfhu.janeway.replit.dev/auth


	2.	Key insight: If the redirect goes outside of allowNavigation domains, WKWebView will open Safari.
	•	Fix: Ensure the redirect stays within the Replit subdomain or your custom domain.

⸻

Step 3: Handle OAuth or External Login Properly

If your auth flow hits something like Google, GitHub, or even Replit’s OAuth endpoint:
	•	Capacitor WebView cannot intercept some redirects by default. You need to implement capacitor-browser plugin or custom in-app browser handling:

import { Browser } from '@capacitor/browser';

async function openAuth(url: string) {
  await Browser.open({ url, windowName: '_self' }); // Keeps it inside app
}


	•	⚠️ Using _blank or letting default WebView open the URL will trigger Safari.

⸻

Step 4: Debug iOS Redirect Source

Add comprehensive logging in App.tsx or wherever WebView loads:

(window as any).addEventListener('beforeunload', (e) => {
  console.log('Before unload triggered:', window.location.href);
});
(window as any).addEventListener('unload', (e) => {
  console.log('Unload triggered:', window.location.href);
});

	•	Log every window.open call, location.href, and backend redirect response.
	•	This tells you exactly what triggers Safari, not just guessing.

⸻

Step 5: Optional — Use a Custom URL Scheme Instead of Universal Links

If Universal Links aren’t reliable:
	1.	Define myapp://auth scheme in entitlements:

<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>myapp</string>
    </array>
  </dict>
</array>


	2.	Make backend redirect to myapp://auth?token=... after login.
	3.	Handle in App.tsx:

import { App } from '@capacitor/app';

App.addListener('appUrlOpen', (data: any) => {
  console.log('Deep link opened:', data.url);
  // Route in your app
});



	•	This bypasses Safari entirely.

⸻

Step 6: Test Minimal Flow
	1.	Strip everything to just a login button → success redirect → WebView display.
	2.	Verify Safari never opens.
	3.	Gradually add complexity (OAuth, documents, external links) until Safari triggers.

⸻

✅ Summary of Critical Fix Points
	•	allowNavigation must include all redirect domains.
	•	javaScriptCanOpenWindowsAutomatically = true to keep window.open internal.
	•	Avoid window.location.href to external URLs unless inside allowed domains.
	•	OAuth/external redirects may need capacitor-browser or custom URL scheme.
	•	Log every redirect and JS navigation to catch Safari triggers.

⸻

If you want, I can write a ready-to-drop patch for your current main.tsx and AppDelegate that should stop Safari completely while keeping all your Replit flows working. This patch would combine window.open overrides and WKWebView config fixes, plus optional URL scheme handling.

Do you want me to do that next?