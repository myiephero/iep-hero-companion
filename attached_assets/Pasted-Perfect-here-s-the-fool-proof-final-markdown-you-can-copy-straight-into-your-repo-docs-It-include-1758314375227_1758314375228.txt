Perfect â€” hereâ€™s the fool-proof final markdown you can copy straight into your repo/docs.
It includes: âœ… patch code, âœ… Info.plist changes, âœ… capacitor config update, âœ… test plan.

â¸»

ðŸš€ iOS Safari Redirect Fix â€” Fool-Proof Guide

Problem

Our iOS Capacitor app was redirecting to Safari during authentication (replit.dev/auth) instead of staying inside the WebView.

Root Cause
	â€¢	Capacitorâ€™s default config didnâ€™t whitelist replit.dev domains.
	â€¢	Our AppDelegate patches never ran because iOS 13+ uses SceneDelegate lifecycle.
	â€¢	As a result, WKWebView wasnâ€™t intercepting navigation â†’ Safari opened external URLs.

â¸»

âœ… Final Fix

1. Update capacitor.config.ts

import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: 'com.myapp.mobile',
  appName: 'MyApp',
  webDir: 'dist',
  server: {
    allowNavigation: [
      '*.janeway.replit.dev',
      'afd4ab41-fa60-4e78-9742-69bb4e3004d6-00-6i79wn87wfhu.janeway.replit.dev',
    ],
  },
};

export default config;

Then run:

npx cap sync ios


â¸»

2. Add SceneDelegate.swift

Create a new file:
ios/App/App/SceneDelegate.swift

import UIKit
import Capacitor
import WebKit

class SceneDelegate: UIResponder, UIWindowSceneDelegate {
    var window: UIWindow?

    func scene(_ scene: UIScene,
               willConnectTo session: UISceneSession,
               options connectionOptions: UIScene.ConnectionOptions) {

        guard let windowScene = (scene as? UIWindowScene) else { return }
        let window = UIWindow(windowScene: windowScene)
        self.window = window
        window.makeKeyAndVisible()

        if let vc = window.rootViewController as? CAPBridgeViewController {
            if let webView = vc.bridge?.webView {
                webView.navigationDelegate = self
                webView.uiDelegate = self
                print("[SUCCESS] WebView delegates attached âœ…")
            }
        }
    }
}

extension SceneDelegate: WKNavigationDelegate, WKUIDelegate {
    func webView(_ webView: WKWebView,
                 decidePolicyFor navigationAction: WKNavigationAction,
                 decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {

        guard let url = navigationAction.request.url else {
            decisionHandler(.cancel)
            return
        }

        print("[WKWebView] Navigation attempt â†’", url.absoluteString)

        if url.host?.contains("replit.dev") == true ||
           url.host?.contains("yourdomain.com") == true {
            decisionHandler(.allow) // Stay inside WebView
        } else {
            decisionHandler(.cancel)
            print("[BLOCKED] Safari redirect prevented â†’", url.absoluteString)
        }
    }

    func webView(_ webView: WKWebView,
                 createWebViewWith configuration: WKWebViewConfiguration,
                 for navigationAction: WKNavigationAction,
                 windowFeatures: WKWindowFeatures) -> WKWebView? {
        print("[WKUIDelegate] Blocked popup")
        return nil
    }
}


â¸»

3. Update Info.plist

Inside ios/App/App/Info.plist add:

<key>UIApplicationSceneManifest</key>
<dict>
  <key>UIApplicationSupportsMultipleScenes</key>
  <false/>
  <key>UISceneConfigurations</key>
  <dict>
    <key>UIWindowSceneSessionRoleApplication</key>
    <array>
      <dict>
        <key>UISceneConfigurationName</key>
        <string>Default Configuration</string>
        <key>UISceneDelegateClassName</key>
        <string>$(PRODUCT_MODULE_NAME).SceneDelegate</string>
      </dict>
    </array>
  </dict>
</dict>


â¸»

ðŸ§ª Test Plan

Step 1. Clean + Rebuild

npx cap sync ios
npx cap open ios

	â€¢	Run in iOS Simulator or on device.

â¸»

Step 2. Check Logs

Look in Xcode console for:

[SUCCESS] WebView delegates attached âœ…
[WKWebView] Navigation attempt â†’ https://afd4ab41-fa60...

	â€¢	If you see these â†’ delegate is attached correctly.
	â€¢	If not â†’ check that SceneDelegate.swift is listed in Info.plist.

â¸»

Step 3. Authentication Flow
	1.	Launch app â†’ login form loads in WebView.
	2.	Perform login.
	3.	Confirm redirect stays in-app instead of Safari.
	4.	Console should log:

[WKWebView] Navigation attempt â†’ https://afd4ab41-fa60.../auth



â¸»

Step 4. Negative Test
	â€¢	Try opening an external link (e.g. https://google.com).
	â€¢	Confirm it is blocked with console log:

[BLOCKED] Safari redirect prevented â†’ https://google.com



â¸»

âœ… Expected Outcome
	â€¢	Replit login flow now remains inside WebView.
	â€¢	Safari never opens for auth.
	â€¢	Delegates show logging in Xcode.
	â€¢	External links are blocked by default.

â¸»

Would you like me to also generate the ready-to-commit Git patch file (so you can just git apply it), or is this markdown guide enough?